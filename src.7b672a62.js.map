{"version":3,"sources":["index.js"],"names":["refs","timerFace","document","querySelector","daysFace","hoursFace","minutesFace","secondsFace","pad","value","String","padStart","countDays","time","days","Math","floor","hours","mins","secs","console","log","updateTimerFace","timeComp","textContent","Timer","constructor","times","timerInterval","isActive","start","setInterval","currentTime","Date","now","oneTime","parse","timer"],"mappings":";;;AAmEC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAnED,QAAA,oBAEA,MAAMA,EAAO,CACTC,UAAWC,SAASC,cAAc,YAClCC,SAAUF,SAASC,cAAc,6BACjCE,UAAWH,SAASC,cAAc,8BAClCG,YAAaJ,SAASC,cAAc,6BACpCI,YAAaL,SAASC,cAAc,8BAGxC,SAASK,EAAIC,GACFC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGrC,SAASC,EAAWC,GACVC,MAAAA,EAAON,EAAIO,KAAKC,MAAMH,EAAQ,QAE9BI,EAAQT,EAAIO,KAAKC,MAAOH,EAAQ,MAAyB,OAEzDK,EAAOV,EAAIO,KAAKC,MAAOH,EAAQ,KAAoB,MAEnDM,EAAOX,EAAIO,KAAKC,MAAOH,EAAQ,IAAc,MAI5C,OAFPO,QAAQC,IAAI,CAAEP,KAAAA,EAAMG,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,IAE1B,CAAEL,KAAAA,EAAMG,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,GAGhC,SAASG,EAAgBC,GACf,MAAA,KAAET,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,GAASI,EAEpCvB,EAAKI,SAASoB,YAAcV,EAC5Bd,EAAKK,UAAUmB,YAAcP,EAC7BjB,EAAKM,YAAYkB,YAAcN,EAC/BlB,EAAKO,YAAYiB,YAAcL,EAGpB,MAAMM,EAEjBC,YAAYC,GACHC,KAAAA,cAAgB,KACjB,KAAKC,UAAW,EAChB,KAAKF,MAAQA,EAGhBG,QAEAD,KAAAA,UAAW,EAEZ,KAAKD,cAAgBG,YAAY,KACvBC,MAAAA,EAAcC,KAAKC,MAKzBZ,EAFuBV,EADN,KAAKe,MAAQK,KAI/B,MAWV,QAAA,QAAA,EAJD,MAAMG,EAAUF,KAAKG,MAAM,IAAIH,KAAK,iBAE9BI,EAAQ,IAAIZ,EAAMU,GAEvBE,EAAMP","file":"src.7b672a62.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n    timerFace: document.querySelector('#timer-1'),\n    daysFace: document.querySelector('span[data-value = \"days\"]'),\n    hoursFace: document.querySelector('span[data-value = \"hours\"]'),\n    minutesFace: document.querySelector('span[data-value = \"mins\"]'),\n    secondsFace: document.querySelector('span[data-value = \"secs\"]'),\n};\n\nfunction pad(value) {\n    return String(value).padStart(2, '0');\n};\n\nfunction countDays (time) {\n    const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n    const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n\n    const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n\n    const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    console.log({ days, hours, mins, secs });\n\n    return { days, hours, mins, secs };\n};\n\nfunction updateTimerFace(timeComp) {\n    const { days, hours, mins, secs } = timeComp;\n    \n    refs.daysFace.textContent = days;\n    refs.hoursFace.textContent = hours;\n    refs.minutesFace.textContent = mins;\n    refs.secondsFace.textContent = secs;\n};\n\nexport default class Timer {\n\n    constructor(times){\n        this.timerInterval = null,\n            this.isActive = false,\n            this.times = times;\n    }\n    \n         start() {\n   \n    this.isActive = true,\n\n        this.timerInterval = setInterval(() => {\n            const currentTime = Date.now();\n            \n            const deltaTime =this.times - currentTime ;           \n            const timeComponents = countDays(deltaTime);\n            \n            updateTimerFace(timeComponents);\n        }, 1000);\n    }\n\n    \n};\n\n\nconst oneTime = Date.parse(new Date('Jul 17, 2021'));\n\nconst timer = new Timer(oneTime);\n\n timer.start();"]}